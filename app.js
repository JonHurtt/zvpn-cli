var pjson = require('./package.json');
var newline = "\n";
var spacer = "\n#++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n";
var locations = [];

console.log(spacer);
console.log(pjson.name + "- v"+pjson.version);
console.log(pjson.homepage);
console.log(spacer);

//Single Location 
function add_location(location){
	var location = {
		client_name: location[0],
		password: location[1],
		gateway: location[2],
		f_gateway: location[3]
	};//defining an empty object
	
	locations.push(location);		
	//console.log(locations);
	}//end add_location
function add_locations(locations){
		locations.forEach(function (location){
		add_location(location)
		console.log('Adding Location ' + location[0] + ' ');
	})
	console.log(spacer);	
	console.log('Locations Added');
	console.log(locations);	
	console.log(spacer);		
}//end add_locations
function getCLI(location){
	var cli;
	console.log("starting getCLI");
	console.log("Variables {client_name: " + location.client_name + ", password: " + location.password + ", gateway: " + location.gateway + ", f_gateway: "+location.f_gateway+"}");
	
	cli = spacer;	
	cli += "#Start of Configuration for "+ location.client_name ;
	cli += spacer;
	
	cli += "user-profile Public-VPN-User security deny ipv6";
	cli += newline;

	cli += "vpn l2l-access-list VPN-ACL src-ip 192.168.47.0/24 dst-ip 0.0.0.0/0";
	cli += newline;
	
	cli += "vpn l2l-access-list VPN-ACL src-ip 10.0.0.0/16 dst-ip 0.0.0.0/0";
	cli += newline;	
	
	cli += getVPN(location.gateway, location.client_name, location.password, false);
	cli += newline;	
	
	if( typeof location.f_gateway !== 'undefined'){
		cli += getVPN(location.f_gateway, location.client_name, location.password, true);	
	}
	cli += spacer;
	cli += "#End of Configuration for "+ location.client_name ;
	cli += spacer;
	
	return cli;
	
}//end getCLI()
function getVPN(gateway, client_name, password, failover){
	var cli_vpn;
	
	if(failover === true ){
		var VPN = "VPN-2"
	}else{
		var VPN = "VPN-1"
	}
	
	console.log("starting getVPN("+gateway+", "+client_name+", "+password+", "+failover+")");

	cli_vpn = "vpn client-ipsec-tunnel "+VPN+" vpn-mode layer-3 lan-to-lan-vpn";
	cli_vpn += newline;	
	cli_vpn += "vpn ipsec-tunnel "+VPN+" gateway "+gateway+" client-name "+client_name+"@bankofamerica.com password "+password+"";
	cli_vpn += newline;
	cli_vpn += "vpn ipsec-tunnel "+VPN+" ike phase1 auth-method psk";
	cli_vpn += newline;
	cli_vpn += "vpn ipsec-tunnel "+VPN+" ike phase1 psk "+password+" ";
	cli_vpn += newline;
	cli_vpn += "vpn ipsec-tunnel "+VPN+" dpd idle-interval 5 retry 5 retry-interval 5";
	cli_vpn += newline;
	cli_vpn += "vpn ipsec-tunnel "+VPN+" ike phase1 encryption-algorithm aes128";
	cli_vpn += newline;
	cli_vpn += "vpn ipsec-tunnel "+VPN+" ike phase1 lifetime 86400";
	cli_vpn += newline;
	cli_vpn += "vpn ipsec-tunnel "+VPN+" ike phase2 encryption-algorithm aes128";
	cli_vpn += newline;
	cli_vpn += "vpn ipsec-tunnel "+VPN+" ike phase2 hash md5";
	cli_vpn += newline;
	cli_vpn += "vpn ipsec-tunnel "+VPN+" ike phase2 lifetime 28800";
	cli_vpn += newline;
	cli_vpn += "vpn ipsec-tunnel "+VPN+" ike phase1 mode aggressive";
	cli_vpn += newline;
	cli_vpn += "vpn ipsec-tunnel "+VPN+" local-ike-id ufqdn "+client_name+"@bankofamerica.com";
	cli_vpn += newline;
	cli_vpn += "vpn ipsec-tunnel "+VPN+" l2l-access-list VPN-ACL";
	cli_vpn += newline;

	if(failover === true ){
		cli_vpn += "vpn tunnel-policy ZVPN client ipsec-tunnel "+VPN+ " ";
	}else{
		cli_vpn += "vpn tunnel-policy ZVPN client ipsec-tunnel "+VPN+" primary";
	}
	return cli_vpn;
}//end getVPN()
function generate_file(location){
	
	return new Promise(function (resolve, reject){
		
		var output = "";
		var directory = "cli_output/"
		var filename = "s-cli-"+location.client_name + ".txt"
		var filepath = directory + filename;
		
		console.log(spacer);
		console.log("Generating CLI...");
		output = spacer;	
		output += "#Generated by " +	pjson.name + "- v"+pjson.version;
		output += newline;
		output += "#Readme found here " +	pjson.homepage;
		output += newline;
		output += "#filename: "+filename;
		output += newline;
		output += "#filepath: "+filepath;
		output += newline;
		output += "#date: "+new Date().toString();	
		output += newline;
		output += "#debug: "+location.gateway+"|"+location.client_name+"|"+location.password+"|"+location.f_gateway;		
		output += spacer;
		output +=getCLI(location);
		resolve({output: output, filepath: filepath});	
		//write_to_file(output, filepath);
		
		resolve(output);
	}//end function
	);//end return
	
	
}//end generate_file()
function write_to_file(output, filepath){
	var fs = require('fs');
	console.log("Generating "+filepath+" ........");
	
	fs.writeFile(filepath, output, function(err) {
	    if(err) {
	        return console.log(err);
	    }
	    console.log("Succesful Generation of "+filepath+"!");
	});
	
	
}//end write_to_file()
function bulk_generate(locations){
	console.log('Bulk Generation has begun...');
	locations.forEach(function (location){
		//generate_file(location)
		generate_file(location).then(function(data){write_to_file(data.output, data.filepath);})
		
	})
	console.log(spacer);	
}//end bulk_generate

function parse_csv(csv_file){
	var fs = require('fs');
	var csv = require('csv');
	
	var parser = csv.parse({delimiter: ','}, function(err, data){
		add_locations(data);
		bulk_generate(locations)
	});
	
	fs.createReadStream(csv_file).pipe(parser);
}//end parse_csv
	

//console.log(getCLI("[GATEWAY]", "[CLIENT_NAME]", "[PASSWORD]","[FAILOVER_GATEWAY]" ));
//console.log(getCLI("[GATEWAY]", "[CLIENT_NAME]", "[PASSWORD]" ));
//generate_file("[GATEWAY]", "zvpn-br-scli", "[PASSWORD]","[FAILOVER_GATEWAY]" )
//generate_file(locations[0])
/*for (i=0; i < 5; ++i){
	console.log('Add Location' + i + ' to locations');
	add_location('location'+i, 'password'+i, 'gateway'+i, 'f_gateway'+i)
}*/



parse_csv('csv_output/test.csv');

